{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rover Iteration 2: Software Feature Description Dependancies Teleoperation Package Develop a ROS package capable of moving the rover given controller/keyboard commands. Deliverables include: Send Controller Information via Ros Messages Develop Drive Interface - Controller to Wheel Commands Simulate Moving Rover Test Final Package Drive Systems: The Drive Interface must be completed before final test Command - We need to test sending controller msgs over command through ros Sensor Integration Develop and improve current sensor readouts. All sensor information must be sent over ROS messaging system, simulatable in Gazebo and visible via Rviz. Deliverables include: Camera Sensor - Send multiple camera streams over ros Drive Sensor - Develop PID controller to retrieve odometry IMU Sensor - Test Odometry fusion with Drive Sensor Lidar - Develop lidar package capable of mapping and improving localisation Realsense: Analyse and Develop a Solution that improves live mapping, navigation and odometry Drive Systems/Arm Systems: we require input from these teams in order to properly develop a PID controller package and retrieve correct odometry Autonomy Analyse and Develop autonomous navigation systems and build upon sensor details. This must all be simulateable on Gazebo. Deliverables include: Detect a variety of AR Tags and use this information for localisation Navigate against a coordinate grid: EKF Analysis of live navigation techniques to reduce need for detailed maps or SLAM before navigation Require use of the Jetson for live testing. Quality of Life Improve Command UI with debug and sensor modes, Include Arm in Teleoperation Package to allow for a more integrated and testable system (Gazebo simulation) Dependancies on Command and arm for testing purposes","title":"Software"},{"location":"Git/","text":"Git Setup The Rover team has a Git Organisation which you must request access to via the current Software Leader/Architect. You can use a Student or Personal Git account. Setting Up SSH This tutorial is more indepth and will be kept up to date more here Login to Git and navigate to your key list . If you are using WSL2 Ubuntu 18.04 sudo vim /etc/wsl.conf Copy and paste the following into the editor, Save and Exit. [automount] options = \"metadata\" Close all WSL terminals and run in powershell wsl --shutdown In ubuntu 18.04 ssh-keygen -t ed25519 -C \"s1234567@student.rmit.edu.au\" git config --global user.name \"s1234567\" git config --global user.email \"s1234567@student.rmit.edu.au\" Copy and Paste the result from this command into a New SSH Key on Github. cat ~/.ssh/id_ed25519.pub In your ROVER_WS. Set this up in Environment Clone this repo to test. git clone git@github.com:RMIT-Rover/rmit_rover_description.git","title":"Git Setup"},{"location":"ROS%20Setup/","text":"Local ROS Setup The Rover is built with ROS Melodic on Ubuntu-18.04 LTS. If you have an install of Ubuntu-18.04 as your boot OS or virtual machine please skip to Step 2. Windows Setup ROS is strictly on linux, and to keep the rover from having strange dependancy issues we recommend using the same OS version for development as production, which in > this case is Ubuntu 18.04. Below are instructions on using WSL, other ways to install Ubuntu and ROS include setting up dual booting, using a liveusb or using a > virtual machine. I have found that Live USB is generally underperformant especially for use in simulations, Dual Booting works but you may run into issues if you do not have enough hard drive space and a virtual machine can sometimes run in to performance issues. Although WSL is not the greatest solution available, it is natively supported by the Windows team and does not require a new install of Linux to run. Enable WSL2 on Windows WSL2 requires the latest build of Windows 10 to be installed. If you dont have the correct requirements you may have to develop on the Rover itself or in a Virtual Machine / Dual boot system. This below tutorial should stay up to date. https://docs.microsoft.com/en-us/windows/wsl/install-win10 As Above: Enable the Windows Subsystem for Linux Check requirements for running WSL 2 Enable Virtual Machine feature Download the Linux kernel update package Set WSL 2 as your default version install ubuntu 18.04 terminal https://www.microsoft.com/store/apps/9N9TNGVNDL3Q I recommend Installing Windows Terminal from the Microsoft Store as well. You can check the install worked properly by opening powershell and entering wsl --list --verbose Info Notice how Ubuntu 18.04 is version 2 Setup X server connection Download vcxsrv on Windows Launch XLaunch via the Start Menu. Launch with default params, except for Additional Parameters->No Access Control , which should be checked. Install x11-apps on ubuntu 18.04 sudo apt install x11-apps Copy and Paste these commands echo 'export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '\\''{print $2}'\\''):0' >> ~/.bashrc echo \"export LIBGL_ALWAYS_INDIRECT=1\" >> ~/.bashrc source ~/.bashrc echo \"source ~/.bashrc\" >> ~/.bash_profile Run xeyes to test if your window opens correctly xeyes Install ROS Melodic Full tutorial here In your ubuntu 18.04 terminal copy and paste these commands. sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list' sudo apt install curl curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add - sudo apt update sudo apt install ros-melodic-desktop-full This will take a few minutes. Setting up environment echo 'export ROS_VER=melodic' >> ~/.bashrc echo 'source /opt/ros/$ROS_VER/setup.bash' >> ~/.bashrc source ~/.bashrc sudo apt-get install python-catkin-tools Create a new directory for your ROS workspace and change to this directory in Ubuntu using cd path/to/dir . If you are using WSL /mnt/c/Users/user_name/Documents/ will take you to the Documents directory, c refers to your hard drive, unlike in Windows this must be lowercase, while typing up the path you can double click tab to view the contents of the path. mkdir -p catkin_ws/src cd catkin_ws catkin init cd src echo \"export ROVER_WS=$(pwd)\" >> ~/.bashrc echo 'alias setup='\\''source $ROVER_WS/../devel/setup.bash'\\' >> ~/.bashrc","title":"ROS Setup"}]}